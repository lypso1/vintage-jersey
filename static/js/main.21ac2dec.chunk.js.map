{"version":3,"sources":["components/minter/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useVintageJerseyContract.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Cover","connect","className","src","alt","onClick","catch","e","console","log","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useVintageJerseyContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","useContract","vintageJerseyNFTAbi","vintageJerseyNFTContractAddress","VintageJerseyNFT","client","ipfsHttpClient","createNft","minterContract","performActions","name","price","description","ipfsImage","ownerAddress","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","_price","ethers","utils","parseUnits","String","methods","uploadJersey","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getJerseyLength","call","nftsLength","i","nft","Promise","resolve","readJersey","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","isSold","index","tokenId","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","buyJersey","value","error","AddNfts","save","setName","setIpfsImage","setDescription","setPrice","show","setShow","handleClose","type","Modal","onHide","centered","Header","closeButton","Title","objectFit","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageUrl","alert","Footer","disabled","Nft","buyNft","Col","Card","Badge","Text","btnText","buttonFunc","Loader","role","NftList","setNfts","loading","setLoading","setNftOwner","getNFTAssets","allNfts","addNft","toast","fetchContractOwner","_address","Add","Row","xs","sm","lg","map","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","vintageJerseyContract","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.21ac2dec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cover = ({ connect }) => {\r\n    return (\r\n      <div className=\"jersey_cover\">\r\n        <div className=\"mt-auto text-light mb-0\">\r\n          <div className=\"cover_img\">\r\n            <img src=\"https://i0.wp.com/russianmachineneverbreaks.com/wp-content/uploads/2018/05/adidas-nhl-jerseys.jpg?fit=960%2C480&ssl=1\" alt=\"\"/>\r\n          </div>\r\n          <h1>Vintage Jersey NFT Collection</h1>\r\n          <p className=\"text-dark\">We offer a platfirm to buy and sell your vintage jersey NFT's </p>\r\n          <button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n          >\r\n            Connect Wallet\r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Cover;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {ToastContainer} from 'react-toastify';\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: '',\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 3, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({address, size, ...rest}) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest} >\r\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {Dropdown, Stack, Spinner} from 'react-bootstrap';\r\nimport {formatBigNumber, truncateAddress} from '../../utils';\r\nimport Identicon from '../ui/Identicon';\r\n\r\n\r\nconst Wallet = ({address, amount, symbol, destroy}) => {\r\n    if (address) {\r\n        return <>\r\n{/* Wallet Dropdown functionality */}\r\n    <Dropdown>\r\n        <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\r\n                            className=\"d-flex align-items-center border rounded-pill py-1\">\r\n            {amount ? (\r\n                <>{formatBigNumber(amount)} <span className=\"ms-1\"> {symbol}</span></>\r\n            ) : (<Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>)}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\r\n        </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu className=\"shadow-lg border-0\" >\r\n        <Dropdown.Item href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}  target=\"_blank\">     \r\n            <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">{truncateAddress(address)}</span>\r\n            </Stack>\r\n        </Dropdown.Item>\r\n        <Dropdown.Divider/>\r\n          <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\r\n              destroy()\r\n          }}>\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\r\n              Disconnect\r\n          </Dropdown.Item>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    \r\n    </>\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;","import {useContract} from './useContract';\r\nimport vintageJerseyNFTAbi from '../contracts/VintageJerseyNFT.json';\r\nimport vintageJerseyNFTContractAddress from '../contracts/VintageJerseyNFT-address.json';\r\n\r\n\r\n// export interface for NFT contract\r\nexport const useVintageJerseyContract = () => useContract(vintageJerseyNFTAbi.abi, vintageJerseyNFTContractAddress.VintageJerseyNFT);\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useContractKit } from '@celo-tools/use-contractkit';\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n\r\n    // get a contract interface to interact with\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// initialize IPFS\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\n// mint an NFT\r\nexport const createNft = async (\r\n  minterContract,\r\n  performActions,\r\n  { name, price, description, ipfsImage, ownerAddress }\r\n) => {\r\n  await performActions(async (kit) => {\r\n    if (!name || !description || !ipfsImage) return;\r\n    const { defaultAccount } = kit;\r\n\r\n    // convert NFT metadata to JSON format\r\n    const data = JSON.stringify({\r\n      name,\r\n      image: ipfsImage,\r\n      description,\r\n      price,\r\n      owner: defaultAccount,\r\n    });\r\n\r\n    try {\r\n      // save NFT metadata to IPFS\r\n      const added = await client.add(data);\r\n\r\n      // IPFS url for uploaded metadata\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\r\n\r\n      // upload the NFT, mint the NFT and save the IPFS url to the blockchain\r\n      let transaction = await minterContract.methods\r\n        .uploadJersey(name, ipfsImage, description, url, _price)\r\n        .send({ from: defaultAccount });\r\n\r\n      return transaction;\r\n    } catch (error) {\r\n      console.log(\"Error uploading file: \", error);\r\n    }\r\n  });\r\n};\r\n\r\n// function to upload a file to IPFS\r\nexport const uploadToIpfs = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (!file) return;\r\n  try {\r\n    const added = await client.add(file, {\r\n      progress: (prog) => console.log(`received: ${prog}`),\r\n    });\r\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  } catch (error) {\r\n    console.log(\"Error uploading file: \", error);\r\n  }\r\n};\r\n\r\n// fetch all NFTs on the smart contract\r\nexport const getNfts = async (minterContract) => {\r\n  try {\r\n    const nfts = [];\r\n    const nftsLength = await minterContract.methods.getJerseyLength().call();\r\n    for (let i = 0; i < Number(nftsLength); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        const image = await minterContract.methods.readJersey(i).call();\r\n        const res = await minterContract.methods.tokenURI(i).call();\r\n        const meta = await fetchNftMeta(res);\r\n        const owner = await fetchNftOwner(minterContract, i);\r\n        const isSold = await minterContract.methods.isSold(i).call();\r\n\r\n        resolve({\r\n          index: i,\r\n          owner,\r\n          name: meta.data.name,\r\n          image: meta.data.image,\r\n          description: meta.data.description,\r\n          tokenId: i,\r\n          price: image[5],\r\n          isSold\r\n        });\r\n      });\r\n      nfts.push(nft);\r\n    }\r\n    return Promise.all(nfts);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the metedata for an NFT from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const meta = await axios.get(ipfsUrl);\r\n    \r\n    return meta;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the owner address of an NFT\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n  try {\r\n    return await minterContract.methods.ownerOf(index).call();\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the address that deployed the NFT contract\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n  try {\r\n    let owner = await minterContract.methods.owner().call();\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\nexport const buyJersey = async (\r\n  minterContract,\r\n  tokenId,\r\n  performActions\r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      const { defaultAccount } = kit;\r\n      const image = await minterContract.methods.readJersey(tokenId).call();\r\n      await minterContract.methods\r\n        .buyJersey(tokenId)\r\n        .send({ from: defaultAccount, value: image[5] });\r\n    });\r\n  } catch (error) {\r\n    console.log({ error });\r\n  }\r\n};\r\n\r\nexport const getOwners = async (minterContract) => {\r\n  try {\r\n    const ownerCount = await minterContract.methods.getOwners().call();\r\n    return ownerCount;\r\n  } catch (error) {\r\n    console.log({ error });\r\n  }\r\n};\r\n","/* eslint-disable react/jsx-filename-extension */\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../../utils/minter\";\r\n\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () => name && ipfsImage && description;\r\n      \r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    // setAttributes([]);\r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\"\r\n        onClick={handleShow}\r\n        className=\"add_jersey mb-4\"\r\n     >Add Vintage Jersey</button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <div className=\"ratio ratio-4x3 modal_image\">\r\n          <img src=\"https://www.bettingblogger.com/files/2020/11/Jersey.png\" alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of Jersey\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Price\"\r\n                onChange={(e) => {\r\n                  setPrice(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer  className=\"modal_footer\">\r\n          <button className=\"close_nft_btn\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button\r\n            className=\"create_nft_btn\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                price,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address\r\n              });\r\n              handleClose();\r\n            }}\r\n            >\r\n            Create NFT\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddNfts.propTypes = {\r\n\r\n  // props passed into this component\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddNfts;\r\n","import PropTypes from \"prop-types\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { Card, Col, Badge, Stack } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\n\r\n\r\n// NFT Cards Functionality\r\nconst Nft = ({ nft, buyNft }) => {\r\n  const { image, description, owner, name, tokenId, price, isSold } = nft;\r\n  const { kit } = useContractKit();\r\n  const { defaultAccount } = kit;\r\n\r\n  const buttonFunc = (isSold, buyNft, owner, defaultAccount) => {\r\n    let btnText;\r\n    if(owner !== defaultAccount) {\r\n      isSold ? btnText = <button className=\"sold_nft\">Sold</button> : btnText = <button className=\"buy_nft\" onClick={buyNft}>Buy</button>\r\n    }\r\n    else {\r\n      btnText = <button className=\"owned_nft\">Owned</button>\r\n    }\r\n    return <>{btnText}</>\r\n  }\r\n\r\n  return (\r\n    <Col key={tokenId}>\r\n      <Card className=\"h-100 jersey_card\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={50} />\r\n            <span className=\"text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge className=\"card_price ms-auto px-3 py-2\">\r\n              {price / 10 ** 18} cUSD\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title className=\"card_title\">{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <div>\r\n          \r\n          </div>\r\n          {buttonFunc(isSold, buyNft, owner, defaultAccount)}\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNft.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default Nft;\r\n","import React from 'react';\r\nimport { Spinner} from \"react-bootstrap\";\r\nconst Loader = () => (\r\n \r\n \r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport {\r\n  getNfts,\r\n  buyJersey,\r\n  createNft,\r\n  fetchNftContractOwner,\r\n} from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst NftList = ({ minterContract, name }) => {\r\n  const { performActions, address } = useContractKit();\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [nftOwner, setNftOwner] = useState(null);\r\n\r\n  const getNFTAssets = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all nfts from the smart contract\r\n      const allNfts = await getNfts(minterContract);\r\n      if (!allNfts) return;\r\n      setNfts(allNfts);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [minterContract]);\r\n\r\n  // Add new NFT\r\n  const addNft = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // create an nft functionality\r\n      await createNft(minterContract, performActions, data);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getNFTAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Buy available NFT\r\n  const buyNft = async (tokenId) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Create a buy NFT functionality\r\n      await buyJersey(minterContract, tokenId, performActions);\r\n      getNFTAssets();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchContractOwner = useCallback(async (minterContract) => {\r\n    // get the address that deployed the NFT contract\r\n    const _address = await fetchNftContractOwner(minterContract);\r\n    setNftOwner(_address);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getNFTAssets();\r\n        fetchContractOwner(minterContract);\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getNFTAssets, fetchContractOwner]);\r\n\r\n  if (address) {\r\n    return (\r\n      <>\r\n        {!loading ? (\r\n          <>\r\n            <div>\r\n              <h1 className=\"fs-10 fw-bold text-center mb-5\">{name}</h1>\r\n              <AddNfts save={addNft} address={address} />\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n\r\n              {/* display all NFTs */}\r\n              {nfts.map((_nft) => (\r\n                <Nft\r\n                  key={_nft.index}\r\n                  buyNft={() => buyNft(_nft.tokenId)}\r\n                  nft={{\r\n                    ..._nft,\r\n                  }}\r\n                />\r\n              ))}\r\n            </Row>\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n  // props passed into this component\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n};\r\n\r\nexport default NftList;\r\n","import React from \"react\";\r\nimport Cover from \"./components/minter/Cover\";\r\nimport { Notification } from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/wallet\";\r\nimport { useBalance, useVintageJerseyContract } from \"./hooks\";\r\nimport Nfts from \"./components/minter/nfts\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport \"./App.css\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\n\r\nconst App = function AppWrapper() {\r\n  const { address, destroy, connect } = useContractKit();\r\n\r\n  //  fetch user's celo balance using hook\r\n  const { balance, getBalance } = useBalance();\r\n\r\n  // initialize the NFT mint contract\r\n  const vintageJerseyContract = useVintageJerseyContract();\r\n\r\n  return (\r\n    <>\r\n      <Notification />\r\n\r\n      {address ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-5\">\r\n            <Nav.Item>\r\n              {/*display user wallet*/}\r\n              <Wallet\r\n                address={address}\r\n                amount={balance.CELO}\r\n                symbol=\"CELO\"\r\n                destroy={destroy}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          <main>\r\n            <Nfts\r\n              name=\"Vintage Jersey NFT Marketplace\"\r\n              updateBalance={getBalance}\r\n              minterContract={vintageJerseyContract}\r\n            />\r\n          </main>\r\n        </Container>\r\n      ) : (\r\n        <Cover name=\"Vintage Jersey NFT Marketplace\" connect={connect} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useContractKit } from '@celo-tools/use-contractkit';\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n\r\n  const getBalance = useCallback(async () => {\r\n\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address || balance) getBalance();\r\n  }, [address, getBalance, balance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Vintage Jersey NFT Marketplace\",\r\n        description: \"Showcasing vinatge jersey NFTs\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}